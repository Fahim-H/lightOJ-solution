// https://lightoj.com/problem/false-ordering

#include<bits/stdc++.h>
using namespace std;

#define endl '\n'
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef long long int ll;
typedef tree< ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// cout<<*X.find_by_order(1)<<endl; // finds the kth element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item

const int MX = 1e3+10;
bitset <MX> isPrime;
vector <int> primes;

void sieve(int n){
    n += 10;
    for(int i=3; i<=n; i+=2 )isPrime[i] = 1;
    isPrime[2] = 1;

    int lim = sqrt(n);
    for (int i=3; i<=lim; i+=2){
        if(isPrime[i] == 1){
            for(int j=i*i; j<=n; j+=(i + i)){
                isPrime[j] = 0;
            }
        }
    }


    primes.push_back(2);
    for(int i=3; i<=n; i+=2){
        if(isPrime[i] == 1 )primes.push_back(i);
    }
}

vector <int> listPower[1050];
int nod[1010];

int main()
{
    optimize();
    int lim = 1e3;
    sieve(lim);

    for(auto p:primes){
        for(int i=p; i<=lim; i+=p){

            int cnt = 1, temp = i;
            while(temp%p == 0){
                temp /= p;
                cnt++;
            }
            listPower[i].push_back(cnt);
        }
    }

    for(int i=1; i<=lim; i++){
        nod[i] = 1;
        for(auto u : listPower[i]){
            nod[i] *= u;
        }
    }

    vector <pair<int, int>> vec;
    for(int i=1; i<=lim; i++){
        vec.push_back({nod[i],-i});
    }
    sort(vec.begin(),vec.end());

    int t; cin>>t;
    for(int tc=1; tc<=t; tc++){
        int n; cin>>n;
        cout<<"Case "<<tc<<": "<<vec[n-1].second * -1<<endl;
    }

    return 0;
}
