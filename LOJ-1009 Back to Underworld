//https://lightoj.com/problem/back-to-underworld

#include<bits/stdc++.h>
using namespace std;

#define endl '\n'
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define MOD 1e9+7
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef long long int ll;
typedef tree< ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// cout<<*X.find_by_order(1)<<endl; // finds the kth element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item

const int MX = 2e4+10;
bool vis[MX];
vector <int> adj[MX];
int cnt, cnt1;

bool exists[MX];

void DFS(int u, int color){
    vis[u] = 1;

    if(color == 1)cnt1++;
    cnt++;

    int temp;
    if(color == 1)temp=2;
    else temp=1;

    for(auto v:adj[u]){
        if(!vis[v]){
            DFS(v, temp);
        }
    }
}

int main(){
    optimize();

    int t; cin>>t;
    for(int tc=1; tc<=t; tc++){
        for(int i=0; i<MX; i++){
            adj[i].clear();
            exists[i] = 0;
            vis[i] = 0;
        }

        int n; cin>>n;
        for(int i=1; i<=n; i++){
            int u,v; cin>>u>>v;
            adj[u].push_back(v);
            adj[v].push_back(u);

            exists[u] = 1;
            exists[v] = 1;
        }

        int ans = 0;
        for(int i=1; i<=2e4; i++){
            if(exists[i] == 1 & vis[i] == 0){
                cnt = 0, cnt1 =0;
                DFS(i, 1);

                ans += max(cnt1, cnt-cnt1);
            }
        }
        cout<<"Case "<<tc<<": "<<ans<<endl;
    }

    return 0;
}
